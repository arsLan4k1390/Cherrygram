import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

repositories {
    mavenCentral()
    google()
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.configureEach {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

static def isMacOS() {
    def osName = System.getProperty('os.name').toLowerCase()
    return osName.contains('mac')
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        if (isMacOS()) { // Cause git is broken on Android Studio Meerkat Feature Drop | 2024.3.2
            commandLine '/usr/local/bin/git', 'rev-parse', /*'--short',*/ 'HEAD'
        } else {
            commandLine 'git', 'rev-parse', /*'--short',*/ 'HEAD'
        }
        standardOutput = stdout
    }
    return stdout.toString().trim()/*.substring(0, 8)*/
}

dependencies {
    implementation 'androidx.fragment:fragment:1.8.6'
    implementation 'androidx.core:core:1.13.1'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.6'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0' // Do not update - breaks animation
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.sharetarget:sharetarget:1.2.0"
    implementation 'androidx.interpolator:interpolator:1.0.0'
    implementation 'androidx.biometric:biometric:1.1.0'

    implementation 'com.google.android.gms:play-services-cast-framework:21.4.0'
    implementation "androidx.mediarouter:mediarouter:1.7.0"
    implementation 'org.nanohttpd:nanohttpd:2.3.1'

    compileOnly 'org.checkerframework:checker-qual:2.5.2'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.0'
    implementation 'com.google.firebase:firebase-messaging:24.1.2'
    implementation 'com.google.firebase:firebase-config:22.1.2'
    implementation 'com.google.firebase:firebase-appindexing:20.0.0'
    implementation 'com.google.android.gms:play-services-maps:19.2.0'
    implementation 'com.google.android.gms:play-services-auth:21.3.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-wearable:19.0.0'
    implementation 'com.google.android.gms:play-services-location:21.3.0'
    implementation 'com.google.android.gms:play-services-wallet:19.4.0'
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
    implementation 'com.stripe:stripe-android:2.0.2'
    implementation 'com.google.mlkit:language-id:17.0.6'
    implementation 'com.android.billingclient:billing:7.1.1' // 8.x breaks QueryProductDetailsResult
    implementation 'com.google.code.gson:gson:2.13.1'

    //Cherrygram
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.1'
    implementation 'com.google.android.play:review:2.0.2'
    implementation 'com.google.firebase:firebase-analytics:22.5.0'
    implementation 'com.google.firebase:firebase-crashlytics:19.4.4'
    implementation 'com.google.ai.client.generativeai:generativeai:0.9.0'
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'

    // CameraX Implementation
    def camerax_version = '1.5.0'
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-extensions:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-video:${camerax_version}"

    implementation 'com.google.android.gms:play-services-mlkit-subject-segmentation:16.0.0-beta1'
    implementation 'com.google.android.gms:play-services-mlkit-image-labeling:16.0.8'

//    implementation 'com.google.mlkit:translate:17.0.3'

    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
            because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
            because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
        }
    }
    implementation 'com.google.android.recaptcha:recaptcha:18.4.0'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'
}

def isWindows = String.valueOf(DefaultNativePlatform.currentOperatingSystem.toFamilyName() == OperatingSystemFamily.WINDOWS)
android {
    kotlinOptions {
        jvmTarget = '17'
    }

    compileSdk 36
    buildToolsVersion = '36.0.0'
    ndkVersion "21.4.7075529" // 26.3.11579264

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    sourceSets.main {
        res.srcDirs = [
                'src/main/res',
                'src/main/res-vkui',
                'src/main/res-solar',
                'src/main/res-tabs',
                'src/main/res-payments',
                'src/main/res-cherrygram'
        ]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17

        coreLibraryDesugaringEnabled true
    }


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 35

        vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']

        multiDexEnabled true

        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-21' //, '-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON'
            }
        }

        def cherryVersion = project.getProperty("APP_VERSION_NAME_CHERRY")
        buildConfigField "String", "BUILD_VERSION_STRING_CHERRY", "\"${cherryVersion}\""
        buildConfigField "String", "GIT_COMMIT_HASH", "\"${getGitHash()}\""
    }

    buildTypes {
        debug {
//            jniDebuggable true
//            minifyEnabled false
//            shrinkResources false
//            multiDexEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro', '../TMessagesProj/proguard-rules-beta.pro'
//            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "BUILD_VERSION_STRING", "\"" + APP_VERSION_NAME + "\""
//            buildConfigField "String", "APP_CENTER_HASH", "\"\""
//            buildConfigField "String", "BETA_URL", "\"" + getProps("BETA_PRIVATE_URL") + "\""
            buildConfigField "boolean", "DEBUG_VERSION", "true"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
            buildConfigField "int", "VERSION_NUM", "0"
        }

        standalone {
//            jniDebuggable false
//            minifyEnabled true
//            multiDexEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
//            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "BUILD_VERSION_STRING", "\"" + APP_VERSION_NAME + "\""
//            buildConfigField "String", "APP_CENTER_HASH", "\"\""
//            buildConfigField "String", "BETA_URL", "\"\""
            buildConfigField "boolean", "DEBUG_VERSION", "false"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
            buildConfigField "int", "VERSION_NUM", "6"
        }

        release {
//            jniDebuggable false
//            minifyEnabled true
//            shrinkResources false
//            multiDexEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
//            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "BUILD_VERSION_STRING", "\"" + APP_VERSION_NAME + "\""
//            buildConfigField "String", "APP_CENTER_HASH", "\"\""
//            buildConfigField "String", "BETA_URL", "\"\""
            buildConfigField "boolean", "DEBUG_VERSION", "false"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
            buildConfigField "int", "VERSION_NUM", "7"
        }
    }

    namespace 'org.telegram.messenger'
}


def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return "";
    }
}
apply plugin: 'com.google.gms.google-services'

task checkVisibility {
    doFirst {
        def isPrivateBuild = project.gradle.startParameter.taskNames.find {
            it.contains("HA_private") || it.contains("HA_hardcore") || it.contains("Debug") || it.contains("Release")
        }
        def isPublicAllowed = !project.hasProperty("IS_PRIVATE") || !project.property("IS_PRIVATE").toBoolean()
        if (!isPrivateBuild && !isPublicAllowed) {
            throw new GradleException("Building public version of private code!")
        }
    }
    doLast {
        if (project.gradle.startParameter.taskNames.find { it.contains("HA_public") }) {
            def privateBuild = file("${projectDir}_AppHockeyApp/afat/HA_private/Telegram-Beta.apk")
            if (privateBuild.exists()) {
                privateBuild.delete()
            }
        }
    }
}

preBuild.dependsOn checkVisibility